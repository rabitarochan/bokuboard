buildscript {
    ext {
        kotlinVersion = '1.1.4'
        springBootVersion = '1.5.6.RELEASE'

        jacksonModuleJava8Version = '2.9.0'
        jacksonModuleKotlinVersion = '2.9.0'
        mybatisSpringBootStarterVersion = '1.3.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-noarg'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.javaParameters = true
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.javaParameters = true
}

repositories {
    mavenCentral()
}

dependencies {
    // Kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    // Spring
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-ldap')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.session:spring-session')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

    // Database
    compile('org.flywaydb:flyway-core')
    compile("org.mybatis:mybatis-typehandlers-jsr310:1.0.2")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootStarterVersion}")
    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')

    // Other
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonModuleJava8Version}")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")

    // Test
    testCompile('com.github.rabitarochan:kotassert:0.1.0')

}

noArg {
    annotation("com.rabitarochan.bokuboard.infrastructure.annotation.NoArgsConstructor")
}

// for Angular

node {
    download = true
    workDir = file('./.nodejs')
    npmWorkDir = file('./src/main/web')
    nodeModulesDir = file('./src/main/web')
}

task buildAngular(type: NpmTask) {
    args = ['run', 'dist']
}

// npmInstall -> buildAngular
buildAngular.dependsOn(npmInstall)
